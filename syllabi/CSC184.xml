<?xml version="1.0" encoding="UTF-8"?>
<course
  xmlns="https://csmp.missouriwestern.edu"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://csmp.missouriwestern.edu/xml/curriculum/course.xsd">
  <college>LA</college>
  <subject>CSC</subject>
  <number>184</number>
  <title>Introduction to Computer Programming</title>
  <offered>fall</offered>
  <offered>spring</offered>
  <scheduleType>lecture</scheduleType>
  <catalogDescription>
  </catalogDescription>
  <prerequisites>
    <prerequisiteCourse minimumGrade="C"><subject>MAT</subject><number>110</number></prerequisiteCourse>
<!-- will examine outcomes from previous students w/ various levels of math / ACT prep /-->
  </prerequisites>

  <textbook title="Think Python"
            publisher="O'Reilly Media"
            year="2012"
            ISBN="978-1449330729">
    <author>Allen B. Downey</author>
  </textbook>

  <objectives>
    <objective>Implement basic numerical algorithms
      <covers standard="acm:2013" knowledgeArea="AL/FDSA" id="1"/>
    </objective>
    <objective>For both a primitive and a compound type, informally describe the values that have that type
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="1"/>
    </objective>
    <objective>Describe examples of program errors detected by a type system
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="3"/>
    </objective>
    <objective>Discuss the importance of algorithms in the problem-solving process
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="1"/>
    </objective>
    <objective>Create algorithms for solving simple problems
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="3"/>
    </objective>
    <objective>Use a programming language to implement, test, and debug algorithms for solving simple problems
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="4"/>
    </objective>
    <objective>Implement, test, and debug simple recursive functions and procedures
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="5"/>
    </objective>
    <objective>Apply the techniques of decomposition to break a program into smaller pieces
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="8"/>
    </objective>
    <objective>Trace the execution of a variety of code segments and write summaries of their computations
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="1"/>
    </objective>
    <objective>Construct, execute and debug programs using a modern IDE and associated tools such as unit testing tools and visual debuggers
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="9"/>
    </objective>
    <objective>Construct and debug programs using the standard libraries available with a chosen programming language
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="10"/>
    </objective>
    <objective>Identify and describe uses of primitive data types
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="2"/>
    </objective>
    <objective>Write programs that use primitive data types
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="3"/>
    </objective>
    <objective>Modify and expand short programs that use standard conditional and iterative control structures and functions
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="4"/>
    </objective>
    <objective>Design, implement, test, and debug a program that uses each of the following fundamental programming constructs: basic computation, simple I/O, standard conditional and iterative structures, the definition of functions, and parameter passing
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="5"/>
    </objective>
    <objective>Write a program that uses file I/O to provide persistence across multiple executions
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="6"/>
    </objective>
    <objective>Choose appropriate conditional and iteration constructs for a given programming task
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="7"/>
    </objective>
    <objective>Describe the concept of recursion and give examples of its use
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="8"/>
    </objective>
  </objectives>
  <outline>
    <topic>A type as a set of values together with a set of operations 
      <topic>Primitive types (e.g., numbers, Booleans)</topic>
      <topic>Compound types built from other types (e.g., records, unions, arrays, lists, functions, references)</topic>
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="1"/>
    </topic>
    <topic>Association of types to variables, arguments, results, and fields 
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="2"/>
    </topic>
    <topic>Type safety and errors caused by using values inconsistently given their intended types
      <covers standard="acm:2013" knowledgeArea="PL/BTS" id="3"/>
    </topic>
    <topic>The concept and properties of algorithms
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="1"/>
    </topic>
    <topic>The role of algorithms in the problem-solving process
      <covers standard="acm:2013" knowledgeArea="SDF/AD" id="2"/>
    </topic>
    <topic>Simple numerical algorithms, such as computing the average of a list of numbers, finding the min, max, and mode in a list, approximating the square root of a number, or finding the greatest common divisor
      <covers standard="acm:2013" knowledgeArea="AL/FDSA" id="1"/>
    </topic>
    <topic>Problem-solving strategies
    </topic>
    <topic>Fundamental design concepts and principles
      <topic>Abstraction
        <covers standard="acm:2013" knowledgeArea="SDF/AD" id="4/1"/>
      </topic>
      <topic>Program decomposition
        <covers standard="acm:2013" knowledgeArea="SDF/AD" id="4/2"/>
      </topic>
    </topic>
    
    <topic>Program comprehension
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="1"/>
    </topic>
    
    <topic>Program correctness
      <topic>Types of errors (syntax, logic, run-time)
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/1"/>
      </topic>
      <topic>The concept of a specification
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/2"/>
      </topic>
      <topic>Testing fundamentals and test-case generation
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/5"/>
      </topic>
      <topic>Unit testing
        <covers standard="acm:2013" knowledgeArea="SDF/DM" id="2/7"/>
      </topic>
    </topic>
    
    <topic>Simple refactoring
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="3"/>
    </topic>
    
    <topic>Modern programming environments
      <topic>Code search</topic>
      <topic>Programming using library components and their APIs</topic>	
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="4"/>
    </topic>
    
    <topic>Debugging strategies
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="5"/>
    </topic>
    
    <topic>Documentation and program style
      <covers standard="acm:2013" knowledgeArea="SDF/DM" id="6"/>
    </topic>
    
    <topic>Basic syntax and semantics of a higher-level language
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="1"/>
    </topic>
    
    <topic>Variables and primitive data types (e.g., numbers, characters, Booleans)
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="2"/>
    </topic>
    
    <topic>Expressions and assignments
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="3"/>
    </topic>
    
    <topic>Simple I/O including file I/O
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="4"/>
    </topic>
    
    <topic>Conditional and iterative control structures
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="5"/>
    </topic>
    
    <topic>Functions and parameter passing
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="6"/>
    </topic>
    
    <topic>The concept of recursion
      <covers standard="acm:2013" knowledgeArea="SDF/FPC" id="7"/>
    </topic>
    
  </outline>
</course>
