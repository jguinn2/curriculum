<?xml version="1.0" encoding="UTF-8"?>
<course 
  xmlns="https://csmp.missouriwestern.edu" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="https://csmp.missouriwestern.edu/xml/curriculum/course.xsd">
  <college>LA</college>
  <subject>ACT</subject>
  <number>324</number>
  <title>Software Testing and DevOps</title>
  <offered>fall-odd</offered>
  <scheduleType>lecture</scheduleType>
  <catalogDescription>
  This course covers fundamentals of software testing and DevOps important to software developers, system administrators, and quality assurance / software testing engineers. A vendor neutral approach will be taken, focusing on popular open source tools for unit testing, integration testing, system testing, version control, build automation, configuration management, virtualization, continuous integration, and deployment management. Relevant software development principles and philosophies such as test-driven development and agile software development will also be discussed. 
  </catalogDescription>
  <prerequisites>
    <prerequisiteCourse minimumGrade="C"><subject>CSC</subject><number>184</number></prerequisiteCourse>
    <prerequisiteCourse minimumGrade="C"><subject>CSC</subject><number>274</number></prerequisiteCourse>
  </prerequisites>

  <textbook title="Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation" 
            publisher="Addison-Wesley"
            year="2010"
            ISBN="978-0321601919">
    <author>Jez Humble</author>
    <author>David Farley</author>
  </textbook>

  <objectives>
    <objective>Explain why the creation of correct program components is important in the production of high-quality software.</objective>
    <objective>Describe current and emerging philosophies, roles, and practices for software development and testing </objective>
    <objective>Apply a variety of software testing practices to a software development project</objective>
    <objective>Describe and distinguish among the different types and levels of testing (unit, integration, systems, and acceptance).</objective>
    <objective>Describe techniques for identifying significant test cases for integration, regression and system testing. </objective>
    <objective>Outline the process of regression testing and its role in release management.</objective>
    <objective>Create and document a set of tests for a medium-size code segment.</objective>
    <objective>Describe how to select good regression tests and automate them. </objective>
    <objective>Discuss the limitations of testing in a particular domain.</objective>
    <objective>Use a defect tracking tool to manage software defects in a small software project.</objective>
    <objective>Describe the difference between centralized and distributed software configuration management.</objective>
    <objective>Describe how version control can be used to help manage software release management.</objective>
    <objective>Identify configuration items and use a source code control tool in a small team-based project.</objective>
    <objective>Describe the issues that are important in selecting a set of tools for the development, testing, and deployment of a particular software system. </objective>
    <objective>Develop virtual environments for software development and deployment</objective>
    <objective>Explain the ethical responsibility of ensuring software correctness, reliability and safety. </objective>
  </objectives>
  <outline>
    <topic>Overview of DevOps goals and practices</topic>
    <topic>Software Testing Practices
      <topic>Test driven development</topic>
      <topic>Automating unit testing with build tools</topic>
      <topic>Scripting for integration, system, and load test automation</topic>
      <topic>System monitoring tools for load testing</topic>
      <topic>Virtualization for testing in diverse computing environments</topic>
      <topic>Other testing practices 
        <topic>Acceptance testing</topic>
        <topic>Regression testing</topic>
        <topic>Configuration testing</topic>
      </topic>
    </topic>
    <topic>Software packaging formats and technologies (ex. jars / wars)</topic>
    <topic>Build automation tools (ex. Maven) </topic>
    <topic>Revision control system varieties and management (ex. Git)</topic>
    <topic>Bug and issue tracking systems (ex. Trac)</topic>
    <topic>Configuration management and provisioning (ex. Puppet)</topic>
    <topic>Managing software development environments (ex. Vagrant)</topic>
    <topic>Managing software deployment environments (ex. Docker)</topic>
  </outline>
</course>
